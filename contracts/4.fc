{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}
int slice_data_empty(slice s) asm "SDEMPTY";
int slice_refs_empty(slice s) asm "SREMPTY";

() recv_internal() {
}

(cell) caesar_cipher(int shift, cell text) {
    builder strcell = begin_cell();

    int charcode = 0;

    var data = text.begin_parse();
    while (data.slice_bits() > 0 ){
        charcode = data~load_uint(8);

        if ( (charcode >= 65) & (charcode <= 90)) {
            charcode = ((charcode - 65 + shift) % 26) + 65;
        }
                elseif ((charcode >= 97) & (charcode <= 122)) {
                    charcode = ((charcode - 97 + shift) % 26) + 97;
                }

        strcell~store_uint(charcode, 8);
    }
    ifnot (data.slice_refs_empty()) {
        return strcell.store_ref(caesar_cipher(shift, data~load_ref())).end_cell();
    }
    return strcell.end_cell();
}


;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return caesar_cipher(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    var s = (26 - shift) % 26;
    return caesar_cipher(s, text);
}

