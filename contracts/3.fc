{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}
(int) ubitsize (int a) asm "UBITSIZE";
forall T -> int tuple_length(T tup) asm "TLEN";
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

int slice_bits(slice s) asm "SBITS";
(int, int) slice_bits_refs(slice s) asm "SBITREFS";

() recv_internal() {
}

(slice, int) get_char(slice cs) {
  if (cs.slice_bits() < 8) {
    if (cs.slice_refs_empty?()) {
      return (cs, 0);
    }

    cs = cs.preload_ref().begin_parse();
  }

  return load_uint(cs, 8);
}

tuple get_binary_list(cell c) {
  tuple stack = null();
  stack~push_back(c);
  tuple res = empty_tuple();

  while (~ stack.is_null()) {
    cell current_cell = stack~pop_back();
    slice current_slice = current_cell.begin_parse();

    do {
      res~tpush(slice_bits(current_slice));
    } until (current_slice.slice_data_empty?())

    repeat (current_slice.slice_refs()) {
      stack~push_back(current_slice~load_ref());
    }
  }

  return res;
}


(cell) loop_through_main(builder res, slice main_s, cell flag_cell, int midx, int f_len, int value) {
  int overflow = 0;
  builder result = res;
  slice main_slice = main_s;
  slice flag_slice = flag_cell.begin_parse();
  int mi = midx;
  int flag_len = f_len;

  do {
    int signal = 0;
    tuple mb = empty_tuple();
    do {
      int b = slice_bits(main_slice);
      int f = slice_bits(flag_slice);

      if (b == f) {
        mb~tpush(b);
        signal += 1;
      } else {
        if (overflow < 255) {
          result = result.store_uint(b, 1);
          overflow += 1;
        } else {
          result = result.store_ref(loop_through_main(begin_cell(), main_slice, flag_cell, mi, flag_len, value));
        }
        flag_slice = flag_cell.begin_parse();
        signal = 0;
      }
      mi += 1;
    } until (flag_slice.slice_data_empty?())

    ;; this means that the flag was found
    if (signal == flag_len) {

      if (overflow < 255) {
        result = result.store_uint(value, flag_len);
        overflow += flag_len;
      } else {
        result = result.store_ref(loop_through_main(begin_cell(), main_slice, flag_cell, mi, flag_len, value));
      }
    } else {
      int i = 0;
      while (i < mb.tuple_length()) {
        int b = mb.at(i);
        if (overflow < 255) {
          result = result.store_uint(b, 1);
          overflow += 1;
        } else {
          result = result.store_ref(loop_through_main(begin_cell(), main_slice, flag_cell, mi, flag_len, value));
          i += 1;
        }
      }
    }

  } until (main_slice.slice_data_empty?())
  return result.end_cell();
}


;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  if (flag < 0) | (value < 0) {
    return null();
  }

  int flag_len = ubitsize(flag);
  int value_len = ubitsize(value);
  cell flag_cell = begin_cell().store_uint(flag, flag_len).end_cell();
  cell value_cell = begin_cell().store_uint(value, value_len).end_cell();

  tuple replace_b = get_binary_list(value_cell);

  builder result = begin_cell();

  ;; this should be fixed
  slice main_slice = linked_list.begin_parse();
  int mi = 0;


  return loop_through_main(result, main_slice, flag_cell, mi, flag_len, value);

}